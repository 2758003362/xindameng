name: Flask应用打包

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 配置Python环境
        run: |
          # 下载独立Python环境（使用稍早版本避免兼容性问题）
          wget https://github.com/astral-sh/python-build-standalone/releases/download/20231014/cpython-3.11.6+20231014-x86_64-unknown-linux-gnu-install_only.tar.gz
          
          # 验证下载
          if [ ! -f "cpython-3.11.6+20231014-x86_64-unknown-linux-gnu-install_only.tar.gz" ]; then
            echo "Python压缩包下载失败"
            exit 1
          fi
          
          # 解压Python
          mkdir -p python
          tar -xzf cpython-3.11.6+20231014-x86_64-unknown-linux-gnu-install_only.tar.gz -C python --strip-components=1
          
          # 验证Python安装
          if [ ! -f "./python/bin/python" ]; then
            echo "Python解压失败"
            exit 1
          fi
          echo "Python版本: $(./python/bin/python --version)"

      - name: 安装依赖
        run: |
          # 升级pip并安装依赖（指定兼容版本）
          ./python/bin/python -m pip install pip==24.0  # 回退到之前的稳定版本
          ./python/bin/python -m pip install flask==2.2.3 pyinstaller==5.13.0
          
          # 查看安装路径确认
          echo "Flask安装路径:"
          ./python/bin/pip show flask | grep Location
          
          # 查看Python路径配置
          ./python/bin/python -c "import sys; print('Python路径:', sys.path)"
          
          # 简化验证方式（忽略输出到/dev/null可能导致的误判）
          echo "尝试导入Flask..."
          if ./python/bin/python -c "import flask; print('成功导入Flask，版本:', flask.__version__)"; then
            echo "依赖验证成功"
          else
            echo "依赖验证失败：无法导入Flask"
            exit 1
          fi

      - name: 打包应用
        run: |
          # 假设主文件为app.py，根据实际文件名修改
          MAIN_FILE="app.py"  # 替换为你的实际文件名
          if [ ! -f "$MAIN_FILE" ]; then
            echo "未找到主程序文件 $MAIN_FILE"
            exit 1
          fi
          
          # 显式指定Python路径和依赖路径
          export PYTHONPATH=$(./python/bin/python -c "import site; print(site.getsitepackages()[0])")
          echo "PYTHONPATH设置为: $PYTHONPATH"
          
          # 使用pyinstaller打包（增加更详细的路径配置）
          ./python/bin/pyinstaller --onefile --name flask-xml-service \
            --paths="$PYTHONPATH" \
            --hidden-import=flask \
            --hidden-import=flask.app \
            --hidden-import=flask.json \
            --hidden-import=werkzeug \
            --hidden-import=jinja2 \
            --hidden-import=click \
            --hidden-import=itsdangerous \
            $MAIN_FILE
          
          # 验证打包结果
          if [ ! -f "dist/flask-xml-service" ]; then
            echo "打包失败"
            exit 1
          fi
          
          # 显示打包文件信息
          ls -lh dist/flask-xml-service
          file dist/flask-xml-service

      - name: 保存打包产物
        uses: actions/upload-artifact@v4
        with:
          name: flask-xml-service
          path: dist/flask-xml-service
          retention-days: 7

  release:
    needs: build-linux
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: 下载打包产物
        uses: actions/download-artifact@v4
        with:
          name: flask-xml-service

      - name: 创建Release
        uses: softprops/action-gh-release@v2
        with:
          files: flask-xml-service
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}